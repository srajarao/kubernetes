#!/bin/bash

# Variables
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
NC='\033[0m'
KUBECONFIG_PATH="${KUBECONFIG_PATH:-$HOME/k3s.yaml}"
CROSS="${RED}❌${NC}"
DEBUG=${DEBUG:-0}
KUBECONFIG_PATH="/home/sanjay/k3s.yaml"
CLEAR_SCREEN=1
TOKEN_DIR="${TOKEN_DIR:-/mnt/vmstore/nano_home/containers/fastapi_nano/.token}"  # Nano: Read Token from server
PROJECT_DIR="${PROJECT_DIR:-/home/sanjay/containers/fastapi_nano}"              # Nano: Main project directory
IMAGE_DIR="${IMAGE_DIR:-/mnt/vmstore/nano_home/containers/fastapi_nano}"        # Nano: Save build images for server
TOWER_IP="${TOWER_IP:-192.168.5.1}"                                            # Tower server IP
NANO_IP="${NANO_IP:-192.168.5.21}"                                            # Nano device IP
AGX_IP="${AGX_IP:-192.168.5.22}"                                              # AGX device IP


# Optionally clear the screen if CLEAR_SCREEN is set to 1
if [ "${CLEAR_SCREEN:-0}" -eq 1 ]; then
    clear
fi


function debug_msg() {
    if [ "$DEBUG" -eq 1 ]; then
        echo -e "${GREEN}[DEBUG] $1${NC}"
    fi
}

function print_result() {
    local timestamp=$(date '+%H:%M:%S')
    if [ "$1" -eq 0 ]; then
        echo -e "[$timestamp] $2 $TICK"
        debug_msg "$2 succeeded"
    else
        echo -e "[$timestamp] $2 $CROSS"
        debug_msg "$2 failed"
    fi
}


function cleanup_k3s_agent_installation() {
    # FIRST: Clean up any remaining nano-related pods BEFORE uninstalling agent
    debug_msg "Checking for any remaining nano pods to clean up"
    if [ -f "$KUBECONFIG_PATH" ] && kubectl --kubeconfig="$KUBECONFIG_PATH" get pods -l app=fastapi-nano --no-headers 2>/dev/null | grep -q .; then
        debug_msg "Found nano pods, cleaning them up"
        # Use timeout and force delete to avoid hanging on terminating pods
        timeout 30s kubectl --kubeconfig="$KUBECONFIG_PATH" delete pods -l app=fastapi-nano --ignore-not-found=true --force --grace-period=0 >/dev/null 2>&1
        DELETE_STATUS=$?
        if [ $DELETE_STATUS -eq 0 ]; then
            print_result 0 "  Cleaned up existing fastapi-nano pods"
        else
            print_result 1 "  Failed to clean up pods (may be already terminating)"
        fi
        # Give pods time to terminate
        sleep 2
    else
        debug_msg "No nano pods found to clean up"
        print_result 0 "  No existing fastapi-nano pods to clean up"
    fi

    # THEN: Check for the k3s uninstall script and run it
    debug_msg "Checking for k3s-agent-uninstall.sh"
    if [ -f "/usr/local/bin/k3s-agent-uninstall.sh" ]; then
        debug_msg "Found k3s-agent-uninstall.sh, running cleanup"
        if [ "$DEBUG" -eq 1 ]; then
            echo -e "  Found k3s agent uninstall script, running cleanup..."
        fi
        sudo /usr/local/bin/k3s-agent-uninstall.sh >/dev/null 2>&1
        print_result $? "  Uninstalled existing k3s agent"
    else
        debug_msg "No k3s-agent-uninstall.sh found"
        print_result 0 "  No k3s agent uninstall script found (initial setup or clean system)"
    fi

    # Remove stale kubeconfig immediately after k3s uninstall
    debug_msg "Removing stale kubeconfig"
    rm -f "$KUBECONFIG_PATH" >/dev/null 2>&1
    print_result $? "  Removed stale $KUBECONFIG_PATH"

    # Remove dangling Docker images to free up space
    debug_msg "Running remove_dangling_docker_images"
    sudo docker image prune -f >/dev/null 2>&1
    print_result $? "  Removed dangling Docker images"

}


function check_certificate_trust() {
    echo -e "\n${GREEN}Certificate Trust Checks${NC}"
    TOKEN_CERT="$TOKEN_DIR/server-ca.crt"
    if [ -f "$TOKEN_CERT" ]; then
        print_result 0 "  Server CA cert found at $TOKEN_CERT"
        grep server ~/.kube/config >/dev/null 2>&1
        print_result $? "  kubeconfig server entry present"
        openssl s_client -connect ${TOWER_IP}:6443 -showcerts </dev/null >/dev/null 2>&1
        print_result $? "  API server certificate presented"
    else
        print_result 1 "  Server CA cert not found at $TOKEN_CERT"
    fi

}




#Main Script Execution Starts Here

# Print out the important environment variables for verification
echo -e "${GREEN}== Program Variables ==${NC}"
echo "KUBECONFIG_PATH   : $KUBECONFIG_PATH"
echo "Token directory   : $TOKEN_DIR"
echo "Project directory : $PROJECT_DIR"
echo "Image directory   : $IMAGE_DIR"
echo "Tower IP          : $TOWER_IP"
echo "Nano IP           : $NANO_IP"
echo "AGX IP            : $AGX_IP"


echo -e "${GREEN}== Cleanup k3s Agent Installation ==${NC}"
cleanup_k3s_agent_installation

echo -e "${GREEN}== Certificate Trust Checks ==${NC}"
check_certificate_trust()


