.TH POD-DEPLOYMENT-ARCHITECTURE 8 "Script Executor" "System Administration"
.SH NAME
pod-deployment-architecture \- Script executor K3s pod deployment architecture
.SH SYNOPSIS
.B pod-deployment-architecture
.RB [ component ]
.RB [ aspect ]
.SH DESCRIPTION
This manual documents the K3s pod deployment architecture for the script executor application, detailing how the web-based script execution interface runs as a containerized pod within the Kubernetes cluster.
.SH DEPLOYMENT ARCHITECTURE
.SS Container as K3s Pod
The script executor runs as a containerized pod in the K3s cluster, providing web-based script execution with real-time terminal output display.
.nf
┌─────────────────────────────────────────────────────────────┐
│                    K3s Cluster                              │
├─────────────────────────────────────────────────────────────┤
│  ┌─────────────────────────────────────────────────────┐    │
│  │                 Worker Nodes                        │    │
│  │  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐  │    │
│  │  │   spark1    │  │   spark2    │  │    nano     │  │    │
│  │  │  (Agent)    │  │  (Agent)    │  │  (Agent)    │  │    │
│  │  └─────────────┘  └─────────────┘  └─────────────┘  │    │
│  └─────────────────────────────────────────────────────┘    │
│                                                             │
│  ┌─────────────────────────────────────────────────────┐    │
│  │                Control Plane                         │    │
│  │  ┌─────────────────────────────────────────────────┐ │    │
│  │  │                tower (Server)                    │ │    │
│  │  │  ┌─────────────────────────────────────────────┐ │ │    │
│  │  │  │        script-executor POD                  │ │ │    │
│  │  │  │  ┌─────────────────────────────────────────┐ │ │ │    │
│  │  │  │  │ 🌐 WebSocket Server (Port 8000)        │ │ │ │    │
│  │  │  │  │  • FastAPI Application                  │ │ │ │    │
│  │  │  │  │  • REST APIs                            │ │ │ │    │
│  │  │  │  │  • WebSocket Handlers                   │ │ │ │    │
│  │  │  │  │  • Script Execution Engine              │ │ │ │    │
│  │  │  │  └─────────────────────────────────────────┘ │ │ │    │
│  │  │  │                                             │ │ │    │
│  │  │  │  📁 Volume Mount:                           │ │ │    │
│  │  │  │     /home/sanjay/containers/kubernetes      │ │ │    │
│  │  │  └─────────────────────────────────────────────┘ │ │ │    │
│  │  └─────────────────────────────────────────────────┘ │ │    │
│  └─────────────────────────────────────────────────────┘    │
└─────────────────────────────────────────────────────────────┘
.fi
.SH KUBERNETES INTEGRATION
.SS Service Integration
.nf
apiVersion: v1
kind: Service
metadata:
  name: script-executor-service
spec:
  selector:
    app: script-executor
  ports:
  - port: 80
    targetPort: 8000  # Container port
  type: ClusterIP      # Internal cluster access
.fi
.SS Ingress for External Access
.nf
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: script-executor-ingress
spec:
  rules:
  - host: script-executor.your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: script-executor-service
            port:
              number: 80
.fi
.SS Volume Mount for Script Access
.nf
spec:
  containers:
  - name: script-executor
    volumeMounts:
    - name: scripts-volume
      mountPath: /home/sanjay/containers/kubernetes
      readOnly: true
  volumes:
  - name: scripts-volume
    hostPath:
      path: /home/sanjay/containers/kubernetes
      type: Directory
.fi
.SH WEBSOCKET COMMUNICATION
.SS Client to Pod Communication
.nf
User Browser → Ingress → Service → Pod (Port 8000)
.fi
.SS Script Execution Flow
.nf
1. User selects scripts in web UI
2. Browser sends WebSocket message to pod
3. Pod executes scripts on host filesystem
4. Pod streams output back via WebSocket
5. Browser displays real-time results
.fi
.SH SECURITY & ACCESS MODEL
.SS Pod Security Context
.nf
securityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000
  capabilities:
    drop:
    - ALL
.fi
.SS Network Policies
.TP
Pod Access
Can only access necessary cluster resources
.TP
External Access
Controlled via ingress
.TP
Internal Communication
Secured
.SS RBAC Integration
.TP
Service Account
Pod service account with minimal permissions
.TP
API Access
Access to Kubernetes API for cluster information
.TP
Script Execution
Limited to allowed directories
.SH RESOURCE REQUIREMENTS
.SS Pod Resources
.nf
resources:
  requests:
    memory: "128Mi"
    cpu: "100m"
  limits:
    memory: "512Mi"
    cpu: "500m"
.fi
.SS Storage Access
.TP
Read Access
Read-only access to script directories
.TP
Write Permissions
No write permissions to host filesystem
.TP
Execution Environment
Secure execution environment
.SH POD LIFECYCLE
.SS Startup Process
.nf
1. Pod scheduled on tower node
2. Container starts with script-executor image
3. FastAPI application initializes
4. Volume mounts provide script access
5. WebSocket server starts on port 8000
6. Health checks pass
7. Service becomes available
.fi
.SS Runtime Operations
.TP
HTTP Requests
Handles HTTP requests for script discovery
.TP
WebSocket Connections
Manages WebSocket connections for execution
.TP
Script Execution
Executes scripts in isolated subprocesses
.TP
Output Streaming
Streams output in real-time
.TP
Resource Monitoring
Monitors resource usage
.SS Scaling & Reliability
.TP
Scaling
Can be scaled to multiple replicas
.TP
Load Balancing
Load balancer distributes requests
.TP
Failure Recovery
Automatic restart on failures
.TP
Updates
Rolling updates for zero downtime
.SH BENEFITS OF POD DEPLOYMENT
.SS Integration Advantages
.TP
Native K3s Citizen
Runs as first-class cluster component
.TP
Service Discovery
Automatic service registration
.TP
Load Balancing
Built-in traffic distribution
.TP
Monitoring
Integrated with cluster monitoring
.SS Operational Benefits
.TP
High Availability
Survives node failures
.TP
Auto-healing
Automatic pod restarts
.TP
Resource Management
Controlled by Kubernetes
.TP
Security
Pod security policies apply
.SS Development Benefits
.TP
Consistent Environment
Same runtime everywhere
.TP
Easy Updates
Rolling deployments
.TP
Configuration Management
ConfigMaps and Secrets
.TP
Logging
Centralized log aggregation
.SH DEPLOYMENT REALITY
The script-executor application runs as a pod in the K3s cluster, hosting the WebSocket server that powers the real-time web interface.
.PP
The pod is:
.TP
Linked to K3s cluster
As a managed workload
.TP
Accessible
Via Kubernetes services and ingress
.TP
Isolated and secure
With proper resource limits
.TP
Integrated
With existing scripts via volume mounts
.PP
This architecture makes the script executor a native part of the cluster infrastructure.
.SH SEE ALSO
.BR kubectl (1),
.BR k3s (8),
.BR docker (1),
.BR fastapi (1)
.SH AUTHOR
Script Executor Development Team