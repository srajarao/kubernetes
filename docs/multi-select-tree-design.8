.TH MULTI-SELECT-TREE-DESIGN 8 "Script Executor" "System Administration"
.SH NAME
multi-select-tree-design \- Multi-select tree interface design for script executor
.SH SYNOPSIS
.B multi-select-tree-design
.RB [ feature ]
.RB [ component ]
.SH DESCRIPTION
This manual documents the multi-select tree interface design concept for the script executor, enabling batch execution of multiple scripts across cluster nodes with real-time progress tracking.
.SH INTERFACE LAYOUT
.SS Script Tree (Left Pane)
.nf
┌─────────────────────────────────────────────────────────────┐
│ 🎯 Script Executor - Multi-Select Mode                      │
├─────────────────────┬───────────────────────────────────────┤
│ 🌳 Script Tree      │ 🔄 Execution Results                 │
│ (Left Pane)         │ (Right Pane)                         │
├─────────────────────┼───────────────────────────────────────┤
│ □ 🌐 Cluster        │ [Terminal Output Area]               │
│   □ 🖥️ Server       │                                       │
│     □ 🔄 backup_    │ [Script 1 Output]                    │
│     □ 📊 monitor_   │ ✅ Completed: backup_home.sh         │
│   □ 🤖 Agent:spark1 │ [Script 2 Output]                    │
│     □ ⚙️ k3s-spark1 │ 🔄 Running: monitor-service.sh       │
│     □ ✅ validate_  │ [Script 3 Output]                    │
│   □ 🤖 Agent:nano   │ ⏳ Queued: k3s-spark1.sh             │
│     □ ⚙️ k3s-nano   │                                       │
│     □ 🌐 setup-net  │                                       │
│                     │                                       │
│ [▶ Execute Selected]│                                       │
│ [🔄 Stop All]       │                                       │
│ [🧹 Clear Results]  │                                       │
└─────────────────────┴───────────────────────────────────────┘
.fi
.SH KEY FEATURES
.SS Multi-Select Tree (Left Pane)
.TP
Checkboxes
Select individual scripts or entire node categories
.TP
Smart Selection
.RS
.IP \(bu 2
Check node = select all scripts under that node
.IP \(bu
Uncheck node = deselect all scripts under that node
.IP \(bu
Mixed state = some scripts selected under node
.RE
.TP
Visual Indicators
.RS
.IP \(bu 2
□ Unchecked
.IP \(bu
☑ Checked
.IP \(bu
☐ Mixed state (grayed)
.RE
.SS Batch Execution Controls
.TP
Execute Selected
Run all checked scripts in sequence
.TP
Stop All
Terminate all running executions
.TP
Clear Results
Clean terminal output
.TP
Progress Bar
Overall batch progress indicator
.SS Execution Results (Right Pane)
.TP
Tabbed Interface
Each script gets its own tab
.TP
Real-time Updates
Live streaming output for each script
.TP
Status Indicators
.RS
.IP \(bu 2
🔄 Running (blue)
.IP \(bu
✅ Completed (green)
.IP \(bu
❌ Failed (red)
.IP \(bu
⏳ Queued (gray)
.IP \(bu
🛑 Stopped (orange)
.RE
.SH EXECUTION WORKFLOW
.SS Batch Execution Process
.nf
1. User selects scripts via checkboxes
2. Clicks "Execute Selected" 
3. System queues scripts for execution
4. Executes scripts sequentially (not parallel)
5. Shows progress and results in real-time
6. Provides summary when complete
.fi
.SS Smart Execution Logic
.nf
class BatchExecutor {
    async executeSelected(checkedScripts) {
        // Queue scripts for sequential execution
        this.executionQueue = checkedScripts;
        this.results = {};
        
        for (const script of this.executionQueue) {
            await this.executeScript(script);
        }
        
        this.showSummary();
    }
    
    async executeScript(script) {
        // Create new tab for this script
        const tab = this.createResultTab(script);
        
        // Execute via WebSocket
        const executionId = await this.startExecution(script);
        
        // Stream results to tab
        this.streamResults(executionId, tab);
    }
}
.fi
.SH ADVANCED FEATURES
.SS Execution Strategies
.TP
Sequential
Run scripts one after another (safest)
.TP
Parallel
Run scripts simultaneously (faster, riskier)
.TP
Dependency-aware
Run scripts in dependency order
.TP
Node-grouped
Run all scripts for one node, then next
.SS Result Management
.TP
Tabbed Results
Each script in its own tab
.TP
Collapsible Sections
Expand/collapse individual results
.TP
Export Options
Download results as text/log files
.TP
Search Results
Find specific output across all executions
.SS Progress Tracking
.TP
Overall Progress
Batch completion percentage
.TP
Individual Status
Per-script execution state
.TP
Time Tracking
Start/end times for each script
.TP
Resource Monitoring
CPU/memory usage during execution
.SH UI ENHANCEMENTS
.SS Visual Design
.TP
Color Coding
Different colors for different node types
.TP
Status Badges
Clear visual status indicators
.TP
Progress Bars
Individual and overall progress
.TP
Responsive Layout
Works on different screen sizes
.SS Interaction Design
.TP
Keyboard Shortcuts
Ctrl+A to select all, Space to toggle
.TP
Drag & Drop
Reorder execution queue
.TP
Context Menus
Right-click options on scripts
.TP
Favorites
Save frequently used script combinations
.SH TECHNICAL IMPLEMENTATION
.SS Backend Changes
.nf
class BatchExecutionRequest(BaseModel):
    script_paths: List[str]
    execution_mode: str = "sequential"  # sequential, parallel, grouped
    timeout_per_script: int = 300

@app.post("/api/execute-batch")
async def execute_batch_scripts(request: BatchExecutionRequest):
    """Execute multiple scripts with batch tracking"""
    batch_id = f"batch_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    # Start batch execution
    executions = []
    for script_path in request.script_paths:
        exec_req = ExecutionRequest(script_path=script_path, timeout=request.timeout_per_script)
        exec_result = await execute_script(exec_req)
        executions.append(exec_result)
    
    return {"batch_id": batch_id, "executions": executions}
.fi
.SS Frontend Multi-Select Tree
.nf
class MultiSelectTree {
    constructor() {
        this.selectedScripts = new Set();
        this.executionTabs = new Map();
    }
    
    toggleSelection(scriptPath, checked) {
        if (checked) {
            this.selectedScripts.add(scriptPath);
        } else {
            this.selectedScripts.delete(scriptPath);
        }
        this.updateUI();
    }
    
    async executeSelected() {
        const scriptPaths = Array.from(this.selectedScripts);
        const response = await fetch('/api/execute-batch', {
            method: 'POST',
            body: JSON.stringify({ script_paths: scriptPaths })
        });
        
        const batch = await response.json();
        this.startBatchMonitoring(batch);
    }
}
.fi
.SH BENEFITS
.SS Operational Efficiency
.TP
Batch Operations
Run multiple related scripts together
.TP
Workflow Automation
Save and reuse script combinations
.TP
Progress Monitoring
Track complex operations across nodes
.TP
Error Isolation
See which specific scripts failed
.SS User Experience
.TP
Visual Selection
Intuitive checkbox interface
.TP
Organized Results
Tabbed output prevents confusion
.TP
Status Overview
Clear progress indicators
.TP
Flexible Control
Start/stop individual or all executions
.SS Cluster Management
.TP
Node Operations
Select all scripts for a specific node
.TP
Coordinated Updates
Run updates across multiple nodes
.TP
Troubleshooting
Execute diagnostic scripts batch-wise
.TP
Maintenance
Scheduled maintenance script execution
.SH USE CASES
.SS Example Scenarios
.TP
Cluster Setup
Select all node setup scripts and execute
.TP
Health Check
Run validation scripts across all nodes
.TP
Backup Operations
Execute backup scripts for all nodes
.TP
Updates
Apply configuration changes cluster-wide
.TP
Troubleshooting
Run diagnostic scripts on multiple nodes
.SS Real-World Example
.nf
Selected Scripts:
□ 🌐 Cluster
  ☑ 🖥️ Server
    ☑ 🔄 backup_home.sh
    ☑ 📊 monitor-service.sh
  ☑ 🤖 Agent:spark1
    ☑ ⚙️ k3s-spark1.sh
    ☑ ✅ validate-k3s-agent.sh
  ☑ 🤖 Agent:nano
    ☑ ⚙️ k3s-nano.sh
    ☑ ✅ validate-nano-setup.sh

[▶ Execute Selected (4 scripts)]

Results:
├── Tab 1: backup_home.sh ✅ Completed
├── Tab 2: monitor-service.sh 🔄 Running...
├── Tab 3: k3s-spark1.sh ⏳ Queued
└── Tab 4: validate-k3s-agent.sh ⏳ Queued
.fi
.SH SEE ALSO
.BR fastapi (1),
.BR websockets (3),
.BR javascript (7)
.SH AUTHOR
Script Executor Design Team