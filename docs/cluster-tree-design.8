.TH CLUSTER-TREE-DESIGN 8 "Script Executor" "System Administration"
.SH NAME
cluster-tree-design \- Tree view design concept for cluster script management
.SH SYNOPSIS
.B cluster-tree-design
.RB [ component ]
.RB [ feature ]
.SH DESCRIPTION
This manual documents the tree view design concept for the script executor, providing a hierarchical view of cluster nodes and scripts organized by purpose and location.
.SH CURRENT FLAT DESIGN
.nf
📋 Available Scripts
├── 📁 server/utils
│   ├── backup_home.sh
│   ├── monitor-service.sh
│   └── validate-k3s-agent.sh
├── 📁 scripts
│   ├── update-nfs-fstab.sh
│   └── restore_backup.sh
└── 📁 agent
    ├── k3s-spark1.sh
    └── k3s-nano.sh
.fi
.SH PROPOSED TREE STRUCTURE DESIGN
.nf
🌐 Kubernetes Cluster
├── 🖥️ Server (tower)
│   ├── 📁 Utils
│   │   ├── 🔄 backup_home.sh
│   │   ├── 📊 monitor-service.sh
│   │   ├── ✅ validate-k3s-agent.sh
│   │   └── 🔧 update-all-nfs-fstab.sh
│   ├── 📁 Config
│   │   ├── ⚙️ k3s-server.sh
│   │   └── 🐳 registry-deployment.yaml
│   └── 📁 Services
│       ├── 🗄️ postgres-db-deployment.yaml
│       └── 📊 pgadmin-deployment.yaml
├── 🤖 Agent: spark1
│   ├── 📁 Setup
│   │   ├── ⚙️ k3s-spark1.sh
│   │   └── 🔧 k3s-spark1-agent-setup.sh
│   ├── 📁 GPU
│   │   └── 🎮 nvidia-plugin-clean-ds.yaml
│   └── 📁 Status
│       └── 📊 node-spark1-describe.txt
├── 🤖 Agent: spark2
│   ├── 📁 Setup
│   │   ├── ⚙️ k3s-spark2.sh
│   │   └── 🔧 k3s-spark2-agent-setup.sh
│   ├── 📁 GPU
│   │   └── 🎮 nvidia-smi-output.txt
│   └── 📁 Status
│       └── 📊 node-spark2-describe.txt
├── 🤖 Agent: nano
│   ├── 📁 Setup
│   │   ├── ⚙️ k3s-nano.sh
│   │   └── 🔧 k3s-nano-agent-setup.sh
│   ├── 📁 Network
│   │   ├── 🌐 setup-nano-network.sh
│   │   └── ✅ validate-nano-setup.sh
│   └── 📁 Cleanup
│       └── 🧹 cleanup-nano.sh
└── 🤖 Agent: agx
    ├── 📁 Setup
    │   ├── ⚙️ agx_app.py
    │   └── 🔧 k3s-agx.sh
    ├── 📁 GPU
    │   └── 🎮 gpuoperator.sh
    └── 📁 Status
        └── 📊 NVIDIA-Blackwell-Support-Issue.md
.fi
.SH NODE TYPES & ICONS
.TP
🌐 Cluster Root
Overall cluster container
.TP
🖥️ Server
Master/control plane node
.TP
🤖 Agent
Worker/compute nodes
.TP
📁 Category
Script groupings (Utils, Setup, GPU, etc.)
.TP
📄 Script
Individual executable files
.TP
⚙️ Config
Configuration files
.TP
🔄 Utility
Maintenance/utility scripts
.TP
✅ Validation
Check/validation scripts
.TP
🔧 Setup
Installation/configuration scripts
.TP
🧹 Cleanup
Removal/cleanup scripts
.TP
📊 Status
Status/info files
.TP
🎮 GPU
GPU-related scripts
.TP
🌐 Network
Network configuration
.TP
🗄️ Database
Database operations
.TP
🐳 Container
Docker/container operations
.SH INTERACTIVE FEATURES
.TP
Expand/Collapse
Click nodes to show/hide children
.TP
Search Filter
Filter tree by script name, node, or category
.TP
Execution Status
Visual indicators for running/completed scripts
.TP
Node Status
Show online/offline status of cluster nodes
.TP
Drag & Drop
Reorganize favorite scripts
.TP
Context Menu
Right-click options (execute, view details, etc.)
.SH BACKEND IMPLEMENTATION
.nf
class ClusterNode(BaseModel):
    name: str
    type: str  # 'cluster', 'server', 'agent', 'category', 'script'
    path: Optional[str] = None
    children: List['ClusterNode'] = []
    status: Optional[str] = None  # 'online', 'offline', 'running', etc.
    metadata: Dict[str, Any] = {}

@app.get("/api/cluster-tree")
async def get_cluster_tree():
    """Generate hierarchical cluster structure"""
    return build_cluster_tree()
.fi
.SH FRONTEND TREE COMPONENT
.nf
class ClusterTree {
    constructor(container) {
        this.container = container;
        this.treeData = null;
        this.expandedNodes = new Set(['cluster', 'server']);
    }

    async loadTree() {
        const response = await fetch('/api/cluster-tree');
        this.treeData = await response.json();
        this.render();
    }

    render() {
        this.container.innerHTML = this.renderNode(this.treeData);
        this.attachEventListeners();
    }

    renderNode(node, level = 0) {
        const isExpanded = this.expandedNodes.has(node.id);
        const hasChildren = node.children && node.children.length > 0;

        return `
            <div class="tree-node" data-id="${node.id}" style="padding-left: ${level * 20}px">
                <div class="node-header ${hasChildren ? 'expandable' : ''} ${isExpanded ? 'expanded' : ''}">
                    ${hasChildren ? '<span class="toggle">▶</span>' : '<span class="spacer"></span>'}
                    <span class="node-icon">${this.getNodeIcon(node.type)}</span>
                    <span class="node-name">${node.name}</span>
                    ${node.type === 'script' ? '<button class="execute-btn">▶</button>' : ''}
                </div>
                ${hasChildren && isExpanded ? `
                    <div class="node-children">
                        ${node.children.map(child => this.renderNode(child, level + 1)).join('')}
                    </div>
                ` : ''}
            </div>
        `;
    }
}
.fi
.SH UI/UX BENEFITS
.SS Visual Hierarchy
.TP
Clear Structure
Immediately see cluster topology
.TP
Logical Grouping
Scripts organized by node and purpose
.TP
Progressive Disclosure
Expand only what you need
.TP
Context Awareness
Know which node a script affects
.SS User Experience
.TP
Intuitive Navigation
Tree structure matches mental model
.TP
Quick Access
Find scripts by node or category
.TP
Status Overview
See cluster health at a glance
.TP
Efficient Workflow
Execute related scripts together
.SS Operational Benefits
.TP
Node Awareness
Understand which scripts affect which nodes
.TP
Dependency Visualization
See relationships between scripts
.TP
Troubleshooting
Quickly identify node-specific issues
.TP
Maintenance
Organized view for cluster management
.SH IMPLEMENTATION STEPS
.TP
Backend API
Create /api/cluster-tree endpoint
.TP
Tree Builder
Logic to organize scripts into hierarchical structure
.TP
Frontend Component
JavaScript tree view component
.TP
Styling
CSS for tree structure and node types
.TP
Interactions
Expand/collapse, search, execution
.TP
Status Integration
Real-time node and script status
.SH SEE ALSO
.BR fastapi (1),
.BR javascript (7),
.BR css (7)
.SH AUTHOR
Script Executor Design Team